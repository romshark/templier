# proxy-timeout defines how long to wait for the
# application server process to start when receiving
# connection refused errors while proxying.
proxy-timeout: 10s

# lint enables golangci-lint when true.
lint: true

# format enables automatic .templ file formatting when true.
format: true

# templier-host defines what host address to run Templiér on.
templier-host: "your-application:11000"

log:
  # level allows you to chose from different log levels:
  #  "" (empty): same as erronly.
  #  erronly: error logs only.
  #  verbose: verbose logging of relevant events and timings.
  #  debug: verbose debug logging.
  level: erronly

  # clear-on allows you to specify when, if at all, the console logs should be cleared:
  #  "" (empty): disables console log clearing.
  #  "restart": clears console logs only on app server restart.
  #  "file-change": clears console logs on every file change.
  clear-on:

  # print-js-debug-logs enables Templiér debug logs in the browser.
  print-js-debug-logs: true

debounce:
  # debounce.templ defines how long to wait for more _templ.txt file changes
  # after the first one occured before triggering all browser tabs to reload.
  templ: 50ms

  # debounce.go defines how long to wait for more non-templ file changes
  # after the first one occured before triggering server rebuild and restart.
  go: 50ms

# tls can be set to null to serve HTTP instead of HTTPS.
tls:
  # tls.cert defines the TLS certificate file path.
  cert: ./your-application.crt.pem

  # tls.keys defines the TLS private key file path.
  key: ./your-application.key.pem

# compiler defines the optional Go compiler arguments.
# For more info use `go help build`.
compiler:
  # compiler.gcflags provides the -gcflags CLI argument to Go compiler when
  # compiling the application server executable.
  # example:
  #
  # gcflags: all=-N -l
  #
  # the example above is equivalent to calling:
  #  go build -gcflags "all=-N -l"
  gcflags:

  # compiler.ldflags provides the -ldflags CLI argument to Go compiler
  # to pass on each go tool link invocation.
  # example:
  #
  # ldflags: -X main.version=1.0.0 -s -w
  #
  # the example above is equivalent to calling:
  #  go build -ldflags="-X main.version=1.0.0 -s -w"
  ldflags:

  # compiler.asmflags is equivalent to `-asmflags '[pattern=]arg list'`.
  asmflags:

  # compiler.trimpath sets `-trimpath` when true.
  trimpath:

  # compiler.race sets `-race` when true.
  race:

  # compiler.tags lists additional build tags to
  # consider satisfied during the build.
  # example:
  #
  # tags: [debug,netgo]
  #
  # the example above is equivalent to calling:
  # go build -tags=debug,netgo
  tags:

  # compiler.p sets the number of programs, such as build commands that can be run in
  # parallel. The default is GOMAXPROCS, normally the number of CPUs available.
  p:

  # msan sets `-msan` when true.
  msan:

  # compiler.env passes environment variables to the Go compiler.
  env:
    CGO_ENABLED: 0

app:
  # app.dir-src-root defines the path to the Go module source root directory.
  dir-src-root: ./

  # app.exclude defines glob filter expressions relative to app.dir-src-root
  # to match files exluded from watching.
  exclude:
    - .* # all hidden files and directories
    - "*~" # all temporary files with a tilde (fixes jetbrains IDEs save)

  # app.dir-cmd defines the path to the main package directory
  # within the app source directory.
  dir-cmd: ./cmd/server/

  # app.dir-work defines the path to the workspace directory
  # to run the application server executable in.
  dir-work: ./

  # app.host defines the host address the application server is running on.
  host: https://your-application:12000

  # app.flags defines the CLI arguments as a string provided
  # to the application server executable.
  flags: -host your-application:12000

# custom-watchers defines custom file change watchers executing arbitrary commands
# on certain file changes that isn't covered by a standard Templiér setup.
custom-watchers:
  - name: "Bundle JS"
    # cmd specifies the command to run when a JavaScript or JSX file is changed.
    # This is optional and can be left empty since sometimes all you want to do is
    # rebuild, or restart or simply reload the browser tabs.
    cmd: npm run build

    # include defines that this watcher will watch all JavaScript and JSX files.
    include: ["*.js", "*.jsx"]

    exclude: # exclude is optional.

    # fail-on-error specifies that in case cmd returns error code 1 the output
    # of the execution should be displayed in the browser, just like
    # for example if the Go compiler fails to compile.
    fail-on-error: true

    # debounce specifies how long to wait for more file changes
    # after the first one occured before executing cmd.
    # Default debounce duration is applied if left empty.
    debounce:

    # requires specifies that browser tabs need to be reloaded when a .js or .jsx file
    # changed and cmd was successfuly executed, but the server doesn't need to be
    # rebuilt or restarted.
    # This option accepts the following values:
    #  - "" (or empty field) = no action, execute cmd and don't do anything else.
    #  - "reload" = reload all browser tabs.
    #  - "restart" = restart the server but don't rebuild it.
    #  - "rebuild" = re-lint, rebuild and restart the server.
    requires: reload

  - name: "Restart on config change"
    # cmd specifies that no special command needs to be executed since this watcher
    # just triggers a server restart.
    cmd:

    # include specifies what kind of configuration files need to be watched.
    include: ["*.yaml", "*.yml", "*.toml"]

    # exclude specifies what kind of configuration files, that would otherwise
    # match `include` to explicitly exclude.
    exclude: ["ignore-this.yaml"]

    # fail-on-error doesn't need to be specified when cmd is empty. Default is false.
    fail-on-error:

    # debounce specifies default debounce duration.
    debounce:

    # requires specifies that when a config file changes the server needs
    # to be restarted, but doesn't need to be rebuilt.
    requires: restart
